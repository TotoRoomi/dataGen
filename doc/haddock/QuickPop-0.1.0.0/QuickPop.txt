-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/dataGen#readme</a>
@package QuickPop
@version 0.1.0.0


-- | raw input data all in a [String] type. To create a generator write
--   ```elements <a>list</a>```
module Data
firstname :: [String]
surname :: [String]
emaildomain :: String
tag :: [String]
imagefilter :: [String]
address :: [String]
adjective :: [String]
activity :: [String]
emotion :: [String]
nounphrase :: [String]
verb :: [String]
preposition :: [String]
predicate :: [String]
tweets :: [String]


-- | Generates usable data for insert statements
module Generator

-- | Describes a few common types used in PSQL
data PSQLTYPE

-- | Used in the PSQLTYPE instance of Show to print
showPSQLTYPE :: PSQLTYPE -> String

-- | Convert string to PSQLTYPE of VARCHAR String
psqlVarchar :: String -> PSQLTYPE

-- | Convert VARCHAR to String
unVarchar :: PSQLTYPE -> String

-- | Convert a tuple of (year,month,day) to PSQLTYPE Date
psqlDate :: (Int, Int, Int) -> PSQLTYPE

-- | Convert a PSQLTYPE Date to a tuple (year,month,day)
unDate :: PSQLTYPE -> (Int, Int, Int)

-- | Convert Int to PSQLTYPE INTEGER
psqlInteger :: Int -> PSQLTYPE

-- | Convert PSQLTYPE INTEGER to Int
unInteger :: PSQLTYPE -> Int

-- | Convert tuples (year,month,day) (hour,minute,second) to PSQLTYPE
--   TIMESTAMP
psqlTimestamp :: (Int, Int, Int) -> (Int, Int, Int) -> Int -> Bool -> PSQLTYPE

-- | Make an n long list of randomly generated items
make :: Int -> Gen a -> Gen [a]

-- | Create a list of unique generated items of length n
unique :: Eq a => Int -> Gen a -> Gen [a]

-- | Generate a full name based on a first and last name in PSQLTYPE
--   Varchar
psqlName :: PSQLTYPE -> PSQLTYPE -> PSQLTYPE

-- | Generate a list of firstnames
firstnames :: Int -> Gen [PSQLTYPE]

-- | Generate a list of lastnames
lastnames :: Int -> Gen [PSQLTYPE]

-- | Produces a list of unique primary keys at the specified length
primaryKeys :: Int -> Gen [PSQLTYPE]

-- | generates a random full name
name :: Gen PSQLTYPE

-- | Generates a full name using the given first and lastname
name2 :: PSQLTYPE -> PSQLTYPE -> PSQLTYPE

-- | Generates a random email
email :: Gen PSQLTYPE

-- | Generates an email with the specified first and lastname
email2 :: PSQLTYPE -> PSQLTYPE -> Gen PSQLTYPE

-- | Creates a date with the specified year
date :: Int -> Gen PSQLTYPE

-- | Generate a date between two dates of the form (year,month,day)
dateBetween :: (Int, Int, Int) -> (Int, Int, Int) -> Gen PSQLTYPE

-- | Provides a random timestamp between two dates, the time is random
--   though
timestampBetween :: (Int, Int, Int) -> (Int, Int, Int) -> Gen PSQLTYPE

-- | Generates two timestamps on the same day but hours between each other
eventTimestampBetween :: (Int, Int, Int) -> (Int, Int, Int) -> Gen (PSQLTYPE, PSQLTYPE)

-- | Generate a random event title
eventTitle :: Gen PSQLTYPE

-- | Generate a random URL of the form "<a>http://kthsocial.com/S/i*i"</a>
--   where S is the string passed and i is the PSQLTYPE Integer passed
url :: String -> PSQLTYPE -> Gen PSQLTYPE

-- | Generate a list of hashtags
tagList :: Gen PSQLTYPE

-- | Generate a random address
place :: Gen PSQLTYPE

-- | Generate a random image filter
imageFilter :: Gen PSQLTYPE

-- | Generate random text of the form "I'm feeling <a>emotion</a>"
imfeeling :: Gen PSQLTYPE

-- | Generate random text of the form "That makes me feel <a>emotion</a>"
makesmefeel :: Gen PSQLTYPE

-- | Generate random text of the form <a>phrase</a> <a>predicate</a>
--   <a>preposition</a> <a>nounphrase</a>, high risk of sounding unnatural.
simpleSentance :: Gen PSQLTYPE

-- | Generate random text of the form <a>phrase</a> <a>phrase</a>
--   <a>nounphrase</a>, sentances are generally of acceptable grammar.
simpleSentance2 :: Gen PSQLTYPE

-- | Generate random Text of the form "I'm feeling <a>emotion</a> about the
--   <a>event title</a> event"
feelabout :: Gen PSQLTYPE

-- | Choose a random tweet from <a>tweets</a> in <a>hs</a>
tweet :: Gen PSQLTYPE

-- | Combine sentance generators into paragraphs.
sentanceAnd :: Gen PSQLTYPE -> Gen PSQLTYPE -> Gen PSQLTYPE

-- | Generate random text from several sentance generators. Risk of wonky
--   grammar.
text :: Gen PSQLTYPE

-- | Generate random text from several sentance generators. Generally
--   acceptable grammar
goodText :: Gen PSQLTYPE
instance GHC.Classes.Eq Generator.PSQLTYPE
instance GHC.Show.Show Generator.PSQLTYPE

module Populator

-- | Represents an Insert Statement in postgreSequal
data InsertStatement
IS :: String -> [String] -> [PSQLTYPE] -> InsertStatement
[schemaName] :: InsertStatement -> String
[attributes] :: InsertStatement -> [String]
[values] :: InsertStatement -> [PSQLTYPE]
Statements :: [InsertStatement] -> InsertStatement

-- | Creates an <a>InsertStatement</a> object based on a schemaName, list
--   of attributes and list of PSQLTYPE values for each attribute.
insertStatement :: String -> [String] -> [PSQLTYPE] -> InsertStatement

-- | Creates many <a>InsertStatement</a> objects in a collection, using the
--   shared schemaName, shared attributes and a list of lists of values.
--   E.g. insert "user" ["name","email"] [[names],[emails]]
insert :: String -> [String] -> [[PSQLTYPE]] -> InsertStatement

-- | Create non reflexive pairs from one list of key. For each key, pair it
--   with unique keys from the same list. Each key gets a maximum nr of
--   random pairings.
selfRefPairs :: Int -> [PSQLTYPE] -> Gen ([Int], [[PSQLTYPE]])

-- | Same ass <tt>selfRedPairs</tt> but without the nr of pairs per
--   element.
selfRefPairs' :: Int -> [PSQLTYPE] -> Gen [[PSQLTYPE]]

-- | For each element in the first list, choose a random element from the
--   second list. Elements from the first list occur only once, but
--   elements from the second list occur multiple times.
pairs2' :: [PSQLTYPE] -> [PSQLTYPE] -> Gen [(PSQLTYPE, PSQLTYPE)]

-- | For each key in the first list choose up to n random and unique keys
--   in the second list.
forEachKeyMakePairs :: (Int, Int) -> [PSQLTYPE] -> [PSQLTYPE] -> Gen ([Int], [[PSQLTYPE]])

-- | Same as <a>forEachKeyMakePairs</a> but discards the nr of pairs per
--   key list.
forEachKeyMakePairs' :: (Int, Int) -> [PSQLTYPE] -> [PSQLTYPE] -> Gen [[PSQLTYPE]]

-- | Make pairs based on a function that uses a list to choose from, the
--   current element to pair to, how many to pair it to and what index it
--   has. Returns the number of pairs per element from the first list and
--   and two lists of an unziped pair in a list. ([nr of pairs per
--   element],[[p1],[p2]]). Used in <a>forEachKeyMakePairs</a>, and
--   <a>selfRefPairs</a>.
pairFactory :: (Int, Int) -> [PSQLTYPE] -> [PSQLTYPE] -> ([PSQLTYPE] -> (PSQLTYPE, Int, Int) -> Gen (Int, [(PSQLTYPE, PSQLTYPE)])) -> Gen ([Int], [[PSQLTYPE]])

-- | For each date in the list of dates, make a date that is equal to or
--   later than that date.
forEachDateMakeDates :: [PSQLTYPE] -> [Int] -> Gen [[PSQLTYPE]]
instance GHC.Show.Show Populator.InsertStatement
instance GHC.Classes.Eq Populator.InsertStatement

module Pretty

-- | Pretty print a Gen InsertStatement in the PSQL format of insert
--   statements. Can either take a collection of InsertStatement or a
--   single one.
pretty :: Gen InsertStatement -> IO ()

-- | Takes an n and a list generator of random PSQLTYPE data and prints it
--   in a readible format for debuging.
debugPSQLList :: Foldable t => t -> (t -> Gen (t PSQLTYPE)) -> IO ()

-- | Takes a generator and prints it in a readible format for debuging
debugPSQL :: Gen PSQLTYPE -> IO ()

-- | Takes a generator and the amount of data to be generated, prints that
--   amount in a readible format for debuging.
debugPSQL' :: Int -> Gen PSQLTYPE -> IO ()
